/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.westpac.random.pins;

import org.testng.annotations.*;
import java.util.Set;
import static org.assertj.core.api.Assertions.*;

public class RandomPinGeneratorTest {

    private RandomPinGeneration randomPinGeneration;

    @BeforeSuite
    public void beforeSuite() {
        randomPinGeneration = new RandomPinGenerator();
    }

    @Test
    public void generatedBatchOfRandomPinsIsNotNull() {
        assertThat(randomPinGeneration.generateBatchOfUniqueRandomPins()).isNotNull();
    }

    @Test
    public void generatedBatchOfRandomPinsIsNotEmpty() {
        assertThat(randomPinGeneration.generateBatchOfUniqueRandomPins()).isNotEmpty();
    }

    @Test
    public void generatedBatchHas1000RandomPins() {
        assertThat(randomPinGeneration.generateBatchOfUniqueRandomPins()).hasSize(1000);
    }

    @Test
    public void generatedBatchOfRandomPinsIsGreaterThanOrEqualTo1000AndLessThanOrEqualTo9999() {
        // all elements must satisfy the given assertions
        assertThat(randomPinGeneration.generateBatchOfUniqueRandomPins()).allSatisfy(pins -> {
            assertThat(pins).isGreaterThanOrEqualTo(1000);
            assertThat(pins).isLessThanOrEqualTo(9999);
        });
    }

    @Test
    public void generatedBatchOfRandomPinsThrowsExceptionWhenMinValueProvidedIsLessThanZero() {
        assertThatThrownBy(() -> {
            assertThat(randomPinGeneration.generateBatchOfUniqueRandomPins(-1, 10, 10));
        }).isInstanceOf(IllegalArgumentException.class)
                .hasMessage("Parameters 'minVal' and 'maxVal' should be non-negative integers and 'maxVal' should be greater than 'minVal'.");
    }

    @Test
    public void generatedBatchOfRandomPinsThrowsExceptionWhenMaxValueProvidedIsLessThanZero() {
        assertThatThrownBy(() -> {
            assertThat(randomPinGeneration.generateBatchOfUniqueRandomPins(10, -1, 10));
        }).isInstanceOf(IllegalArgumentException.class)
                .hasMessage("Parameters 'minVal' and 'maxVal' should be non-negative integers and 'maxVal' should be greater than 'minVal'.");
    }

    @Test
    public void generatedBatchOfRandomPinsThrowsExceptionWhenMinValueIsGreaterThanMaxValue() {
        assertThatThrownBy(() -> {
            assertThat(randomPinGeneration.generateBatchOfUniqueRandomPins(10, 9, 10));
        }).isInstanceOf(IllegalArgumentException.class)
                .hasMessage("Parameters 'minVal' and 'maxVal' should be non-negative integers and 'maxVal' should be greater than 'minVal'.");
    }

    @Test
    public void generatedBatchOfRandomPinsThrowsExceptionWhenNoOfPinsIsLessThanOne() {
        assertThatThrownBy(() -> {
            assertThat(randomPinGeneration.generateBatchOfUniqueRandomPins(10, 11, 0));
        }).isInstanceOf(IllegalArgumentException.class)
                .hasMessage("Parameter 'noOfPins' should be greater than 0.");
    }

    @Test
    public void generatedBatchOfRandomPinsThrowsExceptionWhenNoOfPinsIsGreatedThanTheProbablyNumberOfPinsWhichCanBeGeneratedBetweenTheSuppliedMinValAndMaxVal() {
        assertThatThrownBy(() -> {
            assertThat(randomPinGeneration.generateBatchOfUniqueRandomPins(0, 1, 2));
        }).isInstanceOf(IllegalArgumentException.class)
                .hasMessage("The requested 'noOfPins' cannot be greater than probable number of unique pins which can be generated between the supplied 'minVal' and 'maxVal'");
    }

    @Test
    public void generatedBatchOfRandomPinsIsGreaterThanOrEqualTo100AndLessThanOrEqualTo200AndTheBatchHas100Pins() {
        Set<Integer> randomPins = randomPinGeneration.generateBatchOfUniqueRandomPins(100, 200, 100);
        assertThat(randomPins).hasSize(100);
        // all elements must satisfy the given assertions
        assertThat(randomPins).allSatisfy(pins -> {
            assertThat(pins).isGreaterThanOrEqualTo(100);
            assertThat(pins).isLessThanOrEqualTo(200);
        });
    }
}