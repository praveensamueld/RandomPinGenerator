/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.westpac.random.pins;

import java.util.HashSet;
import java.util.Random;
import java.util.Set;

/**
 * Generates a batch of random unique numbers
 *
 * @version 0.1.0
 */
public class RandomPinGenerator implements RandomPinGeneration {
    private static final int DEFAULT_NO_OF_PINS = 1000;
    private static final int MAX_VALUE = 9999;
    private static final int MIN_VALUE = 1000;

    /**
     * {@inheritDoc}
     */
    @Override
    public Set<Integer> generateBatchOfUniqueRandomPins() {
        //Generates a batch of 1000 random unique pins in range 1000 ≤ r ≤ 9999
        return generateBatchOfUniqueRandomPins(MIN_VALUE, MAX_VALUE, DEFAULT_NO_OF_PINS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Set<Integer> generateBatchOfUniqueRandomPins(final int minVal, final int maxVal, final int noOfPins) throws IllegalArgumentException {

        if (minVal < 0 || maxVal < 0 || minVal >= maxVal) {
            throw new IllegalArgumentException("Parameters 'minVal' and 'maxVal' should be non-negative integers and 'maxVal' should be greater than 'minVal'.");
        }

        if (noOfPins <= 0) {
            throw new IllegalArgumentException("Parameter 'noOfPins' should be greater than 0.");
        }

        if (noOfPins > (maxVal - minVal)) {
            throw new IllegalArgumentException("The requested 'noOfPins' cannot be greater than probable number of unique pins which can be generated between the supplied 'minVal' and 'maxVal'");
        }

        /**
         * https://docs.oracle.com/javase/8/docs/api/java/util/Random.html
         */
        Random random = new Random();
        //Datatype HashSet is used to ignore duplicates values
        HashSet<Integer> randomPins = new HashSet<>();
        //while loop to generate and add pins to the HashMap until the size of the HashSet reaches the desired noOfPins
        while (randomPins.size() < noOfPins) {
            Integer pin = minVal + random.nextInt((maxVal - minVal) + 1);
            randomPins.add(pin);
        }
        return randomPins;
    }
}